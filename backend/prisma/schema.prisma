// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  emailVerified Boolean @default(false)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects     Project[]
  organizations OrganizationMember[]
  apiKeys      ApiKey[]
  auditLogs    AuditLog[]
  sessions     Session[]
  secrets      Secret[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Organization Management
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  projects Project[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  joinedAt       DateTime         @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

// Project Management
model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus @default(DRAFT)
  visibility     Visibility    @default(PRIVATE)
  organizationId String?
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  requirements Requirement[]
  erds         Erd[]
  apis         Api[]
  connectors   Connector[]
  deployments  Deployment[]
  secrets      Secret[]

  @@map("projects")
}

// Requirements and Translation
model Requirement {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String
  status      RequirementStatus @default(PENDING)
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("requirements")
}

// Entity Relationship Diagrams
model Erd {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  entities    Json     // Array of entity definitions
  relationships Json   // Array of relationship definitions
  version     Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("erds")
}

// API Specifications
model Api {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  openApiSpec Json     // OpenAPI 3.0 specification
  version     String   @default("1.0.0")
  status      ApiStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("apis")
}

// API Connectors
model Connector {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  type        ConnectorType
  config      Json     // Connector configuration
  status      ConnectorStatus @default(INACTIVE)
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("connectors")
}

// Deployments
model Deployment {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  environment Environment
  status      DeploymentStatus @default(PENDING)
  config      Json     // Deployment configuration
  logs        String?
  deployedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("deployments")
}

// API Keys
model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  permissions Json   // Array of permissions
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Secrets Vault
model Secret {
  id          String   @id @default(cuid())
  name        String
  value       String   // Encrypted
  description String?
  tags        String[]
  projectId   String?
  userId      String
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("secrets")
}

// Audit Logs
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DELETED
}

enum Visibility {
  PRIVATE
  ORGANIZATION
  PUBLIC
}

enum RequirementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ApiStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

enum ConnectorType {
  SLACK
  JIRA
  GITHUB
  GOOGLE
  MICROSOFT
  SALESFORCE
  STRIPE
  TWILIO
  SENDGRID
  AWS
  CUSTOM
}

enum ConnectorStatus {
  ACTIVE
  INACTIVE
  ERROR
  PENDING
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum DeploymentStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  ROLLED_BACK
}
