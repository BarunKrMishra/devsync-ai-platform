version: '3.8'

networks:
  devsync-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  jaeger-data:
  prometheus-data:
  grafana-data:

services:
  # Core Infrastructure
  postgres:
    image: postgres:15-alpine
    container_name: devsync-postgres
    environment:
      POSTGRES_DB: devsync
      POSTGRES_USER: devsync
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devsync"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: devsync-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring Infrastructure
  jaeger:
    image: jaegertracing/all-in-one:1.45
    container_name: devsync-jaeger
    ports:
      - "16686:16686"
      - "6831:6831/udp"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - devsync-network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: devsync-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - devsync-network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: devsync-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - devsync-network

  # DevSync Microservices
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: devsync-api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: supersecretjwtkey
      FRONTEND_URL: http://localhost:3001
      AUTH_SERVICE_URL: http://auth-service:3001
      AI_TRANSLATOR_SERVICE_URL: http://ai-translator-service:3002
      API_CONNECTOR_SERVICE_URL: http://api-connector-service:3003
      CODEGEN_SERVICE_URL: http://codegen-service:3004
      PROJECT_SERVICE_URL: http://project-service:3005
      NOTIFICATION_SERVICE_URL: http://notification-service:3006
      STORAGE_SERVICE_URL: http://storage-service:3007
      MONITORING_SERVICE_URL: http://monitoring-service:3008
      TELEMETRY_ENABLED: "true"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6832
      PROMETHEUS_PORT: 9464
    depends_on:
      - postgres
      - redis
      - jaeger
      - prometheus
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    container_name: devsync-auth-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://devsync:password@postgres:5432/devsync_auth
      JWT_SECRET: supersecretjwtkey
      JWT_REFRESH_SECRET: supersecretrefreshkey
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      FRONTEND_URL: http://localhost:3000
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    depends_on:
      - postgres
      - redis
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-translator-service:
    build:
      context: ./microservices/ai-translator-service
      dockerfile: Dockerfile
    container_name: devsync-ai-translator-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AI_FALLBACK_ENABLED: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 2
      CACHE_ENABLED: "true"
      CACHE_TTL: 3600
      MAX_INPUT_LENGTH: 10000
      MAX_CONCURRENT_REQUESTS: 5
    depends_on:
      - redis
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-connector-service:
    build:
      context: ./microservices/api-connector-service
      dockerfile: Dockerfile
    container_name: devsync-api-connector-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 3
    depends_on:
      - redis
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  codegen-service:
    build:
      context: ./microservices/codegen-service
      dockerfile: Dockerfile
    container_name: devsync-codegen-service
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: production
      PORT: 3004
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  project-service:
    build:
      context: ./microservices/project-service
      dockerfile: Dockerfile
    container_name: devsync-project-service
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://devsync:password@postgres:5432/devsync_projects
    depends_on:
      - postgres
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: devsync-notification-service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      PORT: 3006
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 4
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
    depends_on:
      - redis
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  storage-service:
    build:
      context: ./microservices/storage-service
      dockerfile: Dockerfile
    container_name: devsync-storage-service
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: production
      PORT: 3007
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET: ${S3_BUCKET}
    volumes:
      - ./uploads:/app/uploads
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitoring-service:
    build:
      context: ./microservices/monitoring-service
      dockerfile: Dockerfile
    container_name: devsync-monitoring-service
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: production
      PORT: 3008
      PROMETHEUS_URL: http://prometheus:9090
      JAEGER_URL: http://jaeger:16686
    depends_on:
      - prometheus
      - jaeger
    networks:
      - devsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devsync-frontend
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_AUTH_URL: http://localhost:3001
      NEXT_PUBLIC_AI_TRANSLATOR_URL: http://localhost:3002
    networks:
      - devsync-network